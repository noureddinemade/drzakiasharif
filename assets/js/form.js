const contactForm=document.querySelector("form"),contactFormInputs=contactForm.querySelectorAll("input, select, textarea"),formName=contactForm.querySelector(".-name"),formNameInput=formName.querySelector("input"),formContactPref=contactForm.querySelector(".-contactPref"),formContactPrefPhone=formContactPref.querySelector("#radioPhone"),formContactPrefEmail=formContactPref.querySelector("#radioEmail"),formEmail=contactForm.querySelector(".-email"),formEmailInput=formEmail.querySelector("input"),formPhone=contactForm.querySelector(".-phone"),formPhoneInput=formPhone.querySelector("input"),formReason=contactForm.querySelector(".-reason"),formReasonSelect=formReason.querySelector("select"),formPreferredTime=contactForm.querySelector(".-preferredTime"),formPreferredTimeAM=formPreferredTime.querySelector("#radioAM"),formPreferredTimePM=formPreferredTime.querySelector("#radioPM"),formMessage=contactForm.querySelector(".-message"),formMessageInput=formMessage.querySelector("textarea"),formVerify=contactForm.querySelector(".-verify"),formVerifyInput=formVerify.querySelector("input"),formVerifySpan=formVerify.querySelector("label span"),formVerifyMessage=formVerify.querySelector("p"),formButton=contactForm.querySelector("button"),formRadios=contactForm.querySelectorAll("input[type=radio]");let verifyX=0,verifyY=0,verifyAnswer=0;const readyToSubmit=e=>{let r=0,o=!1;return formRadios.forEach(e=>{e.checked?r-=1:r+=1}),contactFormInputs.forEach(t=>{"name"==t.name&&(t.value?"1"==e&&formName.classList.remove("-error"):(o=!0,"1"==e&&formName.classList.add("-error"))),"radio"==t.type&&t.checked&&("Phone"==t.value?formPhoneInput.value||(o=!0,"1"==e&&formPhone.classList.add("-error")):"Email"==t.value&&(formEmailInput.value||(o=!0,"1"==e&&formEmail.classList.add("-error")))),"Book an appointment"==t.value?r>0&&("1"==e&&(contactForm.querySelector("input[name=contact-preference]").checked?formContactPref.classList.remove("-error"):formContactPref.classList.add("-error"),contactForm.querySelector("input[name=preferred-time]").checked?formPreferredTime.classList.remove("-error"):formPreferredTime.classList.add("-error")),o=!0):r>2&&("1"==e&&formContactPref.classList.add("-error"),o=!0),"message"==t.name&&(t.value?"1"==e&&formMessage.classList.remove("-error"):(o=!0,"1"==e&&formMessage.classList.add("-error"))),"verify"==t.name&&(t.value?"1"==e&&formVerify.classList.remove("-error"):(o=!0,"1"==e&&formVerify.classList.add("-error")))}),o},randomVerify=()=>{verifyX=Math.floor(10*Math.random())+1,verifyY=Math.floor(10*Math.random())+1,verifyAnswer=verifyX+verifyY,formVerifySpan.innerHTML=`${verifyX} + ${verifyY}`};verifyX=Math.floor(10*Math.random())+1,verifyY=Math.floor(10*Math.random())+1,verifyAnswer=verifyX+verifyY,formVerifySpan.innerHTML=`${verifyX} + ${verifyY}`,formContactPrefPhone.addEventListener("click",()=>{formEmail.style.display="none",formPhone.style.display="block"}),formContactPrefEmail.addEventListener("click",()=>{formPhone.style.display="none",formEmail.style.display="block"}),formReasonSelect.addEventListener("change",()=>{let e=formPreferredTime.querySelectorAll("input");"General enquiry"==formReasonSelect.value?(formPreferredTime.style.display="none",e.forEach(e=>{e.checked=!1})):formPreferredTime.style.display="block"}),contactFormInputs.forEach(e=>{"text"==e.type||"email"==e.type||"number"==e.type||"message"==e.name?e.addEventListener("keyup",()=>{e.parentNode.classList.remove("-error"),readyToSubmit(0)?formButton.classList.add("-disabled"):formButton.classList.remove("-disabled")}):e.addEventListener("change",()=>{e.parentNode.parentNode.classList.remove("-error"),readyToSubmit(0)?formButton.classList.add("-disabled"):formButton.classList.remove("-disabled")})}),formButton.addEventListener("click",e=>{readyToSubmit(1)?(e.preventDefault(),contactForm.scrollIntoView()):formVerifyInput.value!=verifyAnswer&&(e.preventDefault(),formVerify.classList.add("-error"),formVerifyMessage.innerHTML="This answer is not correct")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
